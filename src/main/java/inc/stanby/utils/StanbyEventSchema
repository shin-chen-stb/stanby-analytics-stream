package inc.stanby.utils;

import inc.stanby.schema.StanbyEvent;
import org.apache.avro.data.TimeConversions;
import org.apache.avro.specific.SpecificData;
import org.apache.flink.api.common.serialization.DeserializationSchema;
import org.apache.flink.api.common.serialization.SerializationSchema;
import org.apache.flink.api.common.typeinfo.TypeInformation;
import org.apache.flink.formats.avro.typeutils.AvroTypeInfo;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode;
import org.joda.time.DateTime;

public class StanbyEventSchema implements SerializationSchema<StanbyEvent>, DeserializationSchema<StanbyEvent> {

  private final ObjectMapper mapper = new ObjectMapper();
  private static final Logger LOG = LoggerFactory.getLogger(StanbyEventSchema.class);

  static {
    SpecificData.get().addLogicalTypeConversion(new TimeConversions.TimestampConversion());
  }

//   @Override
//   public byte[] serialize(StanbyEvent event) {
//     return toJson(event).getBytes();
//   }

  @Override
  public StanbyEvent deserialize(byte[] bytes) {
    try {
      ObjectNode node = this.mapper.readValue(bytes, ObjectNode.class);

      return StanbyEvent
          .newBuilder()
          .setService(node.get("service").asText())
          .setEventType(node.get("event_type").asText()))
          .setSUID(node.get("suid").asText())
          .setSSID(node.get("SSID").asText())
          .setCurrentUrl(node.get("current_url").asText())
          .setReferrer(node.get("referrer").asText())
          .setPage(node.get("page").asText())
          .setPageType(node.get("page_type").asText())
          .setUserAgent(node.get("user_agent").asText())
          .setSearchRequestId(node.get("search_request_id").asText())
          .setEpoch(node.get("user_agent").asInt())
          .setIP(node.get("ip").asText())
          .build();
    } catch (Exception e) {
      LOG.warn("Failed to serialize event: {}", new String(bytes), e);

      return null;
    }
  }
